package com.ospreydcs.dp.jal.tools.query.recovery;

import java.io.PrintStream;
import java.time.Duration;
import java.time.Instant;
import java.util.Collection;
import java.util.Comparator;
import java.util.List;
import java.util.SortedSet;

import com.ospreydcs.dp.api.common.DpGrpcStreamType;
import com.ospreydcs.dp.api.query.DpDataRequest;
import com.ospreydcs.dp.api.query.DpQueryException;
import com.ospreydcs.dp.api.query.model.assem.QueryRequestRecoverer;
import com.ospreydcs.dp.api.query.model.correl.CorrelatedQueryDataOld;
import com.ospreydcs.dp.api.query.model.correl.RawCorrelatedData;

/**
 * <p>
 * Convenience record for storing the results of a 
 * <code>{@link QueryRequestRecoverer#processRequest(DpDataRequest)}</code> operation.
 * </p>
 * <p>
 * The results are assumed to be collected externally from a a test fixture running a 
 * <code>processRequest(DpDataRequest)</code> operation.  The results are assumed to originate from a battery of
 * of tests and are those for a given processor configuration <code>{@link #recConfig}</code> and time-series data 
 * request <code>{@link #request}</code>.
 * </p>
 *
 * @param dblRate       the processing rate for the given configuration and time-series data request  
 * @param indCase       optional case index
 * @param cntMessages   number of response messages recovered and processed
 * @param szAlloc       total memory allocation recovered and processed
 * @param cntBlocks     number of correlated data blocks produced
 * @param durRequest    the duration required for the request recover and processing
 * @param recConfig     the test configuration for the <code>QueryRequestProcessorOld</code> 
 * @param request       the time-series data request used in the test
 * @param strRqstName   the (optional) time-series data request name
 * @param enmStrmType   the gRPC stream type used in the data request
 * @param lstCmpRqsts   the composite requests generated by the request processor 
 *  
 * @author Christopher K. Allen
 * @since Jan 25, 2025
 *
 * @see TestConfig
 */
public record    ConfigResult(
        double dblRate, 
        int indCase, 
        int cntMessages, 
        long szAlloc, 
        int cntBlocks, 
        Duration durRequest, 
        TestConfig recConfig, 
        DpDataRequest request, 
        String strRqstName, 
        DpGrpcStreamType enmStrmType,
        List<DpDataRequest> lstCmpRqsts) 
{

    //
    // Creator
    //

    /**
     * <p>
     * Creates a new,  initialized <code>ConfigResult</code> record according to the given arguments.
     * </p>
     * <p>
     * Takes the request name (i.e., request ID) and the gRPC stream type fields directly from the 
     * given request.
     * </p>
     * 
     * @param dblRate       the processing rate for the given configuration and time-series data request  
     * @param cntMessages   number of response messages recovered and processed
     * @param szAlloc       total memory allocation recovered and processed
     * @param cntBlocks     number of correlated data blocks produced
     * @param durRequest    the duration required for the request recover and processing
     * @param recConfig     the test configuration for the <code>QueryRequestRecoverer</code> 
     * @param request       the time-series data request used in the test
     * @param lstCmpRqsts   the composite requests generated by the request processor 
     * 
     * @return  a new <code>ConfigResult</code> record with the given parameters
     */
    public static ConfigResult  from(double dblRate, 
                                     int cntMessages, 
                                     long szAlloc, 
                                     int cntBlocks, 
                                     Duration durRequest, 
                                     TestConfig recConfig, 
                                     DpDataRequest request, 
                                     List<DpDataRequest> lstCmpRqsts) 
    {

        // Increment case counter and extract request name (identifier)
        int                 indCase = ConfigResult.cntCase++;
        String              strRqstName = request.getRequestId();
        DpGrpcStreamType    enmStrmType = request.getStreamType();
        
        return new ConfigResult(dblRate, 
                indCase, 
                cntMessages, 
                szAlloc, 
                cntBlocks, 
                durRequest, 
                recConfig, 
                request, 
                strRqstName,
                enmStrmType,
                lstCmpRqsts);
    }

    /**
     * <p>
     * Creates a new,  initialized <code>ConfigResult</code> record according to the given arguments.
     * </p>
     * <p>
     * Takes the request name (i.e., request ID) field directly from the given request.
     * </p>
     * 
     * @param dblRate       the processing rate for the given configuration and time-series data request  
     * @param cntMessages   number of response messages recovered and processed
     * @param szAlloc       total memory allocation recovered and processed
     * @param cntBlocks     number of correlated data blocks produced
     * @param durRequest    the duration required for the request recover and processing
     * @param recConfig     the test configuration for the <code>QueryRequestRecoverer</code> 
     * @param request       the time-series data request used in the test
     * @param enmStrmType   the gRPC stream type used in the data request
     * @param lstCmpRqsts   the composite requests generated by the request processor 
     * 
     * @return  a new <code>ConfigResult</code> record with the given parameters
     */
    public static ConfigResult  from(double dblRate, 
                                     int cntMessages, 
                                     long szAlloc, 
                                     int cntBlocks, 
                                     Duration durRequest, 
                                     TestConfig recConfig, 
                                     DpDataRequest request, 
                                     DpGrpcStreamType enmStrmType,
                                     List<DpDataRequest> lstCmpRqsts) 
    {

        // Increment case counter and extract request name (identifier)
        int                 indCase = ConfigResult.cntCase++;
        String              strRqstName = request.getRequestId();
        
        return new ConfigResult(dblRate, 
                indCase, 
                cntMessages, 
                szAlloc, 
                cntBlocks, 
                durRequest, 
                recConfig, 
                request, 
                strRqstName,
                enmStrmType,
                lstCmpRqsts);
    }

    
    //
    // Record Constants
    //
    
    /** The starting index of the case number */
    public static final int    INT_CASE_START = 1;
    
    
    //
    // Record Resources
    //
    
    /**  The index of current configuration result test case */
    private static  int     cntCase = INT_CASE_START;
    
    
    //
    // Operations
    //
    
    /**
     * Resets the case index counter to the initial value at class loader initialization.
     */
    public static void resetCaseCounter() {
        ConfigResult.cntCase = INT_CASE_START;
    }

    /**
     * <p>
     * Performs the given time-series data request on the given correlator for the given configuration and evaluates results.
     * </p>
     * <p>
     * The gRPC stream type used for the request data recovery is explicitly given here, however, the actual evaluation
     * is deferred to method <code>{@link #evaluate(QueryRequestRecoverer, DpDataRequest, TestConfig)}</code>.
     * <ol>
     * <li>
     * First, the <code>DpDataRequest</code> argument is modified to use the given <code>DpGrpcStreamType</code> 
     * argument value. 
     * </li>
     * <li>
     * Second, the method <code>{@link #evaluate(QueryRequestRecoverer, DpDataRequest, TestConfig)}</code> is invoked
     * to evaluate the processor with the modified request.
     * </li>
     * <li>
     * Third, the <code>DpDataRequest</code> argument is restored to its original state.
     * </li>
     * <li>
     * Last, the result from the <code>{@link #evaluate(QueryRequestRecoverer, DpDataRequest, TestConfig)}</code> invocation
     * is returned.
     * </li>
     * </ol>
     * </p>
     * 
     * @param prcrRqsts     the request processor under evaluation
     * @param rqst          time-series data request to be offered to the processor for evaluation
     * @param enmStrmType   the gRPC stream type to use in the request data recovery
     * @param recPrcrCfg    configuration record for the given request processor
     * 
     * @return  a new <code>ConfigResult</code> record containing the results of the processor request evaluation
     * 
     * @throws DpQueryException general Query Service exception during request processing (see message and cause)
     * 
     * @see <code>{@link DpDataRequest#getStreamType()}</code>
     * @see #evaluate(QueryRequestRecoverer, DpDataRequest, TestConfig)
     */
    public static ConfigResult  evaluate(QueryRequestRecoverer prcrRqsts, DpDataRequest rqst, DpGrpcStreamType enmStrmType, TestConfig recPrcrCfg) throws DpQueryException {

        // Configure the data request
        DpGrpcStreamType    enmStrmTypeOrg = rqst.getStreamType();
        rqst.setStreamType(enmStrmType);
        
        // Compute results
        ConfigResult    recResult = ConfigResult.evaluate(prcrRqsts, rqst, recPrcrCfg);

        // Restore data request to original state and return results
        rqst.setStreamType(enmStrmTypeOrg);
        
        return recResult;
    }
    
    /**
     * <p>
     * Performs the given time-series data request on the given correlator for the given configuration and evaluates results.
     * </p>
     * <p>
     * First the given <code>TestConfig</code> record is used to configure the given <code>QueryRequestRecoverer</code> 
     * instance. Then the given <code>DpDataRequest</code> is used for the 
     * <code>{@link QueryRequestRecoverer#processRequest(DpDataRequest)}</code> operation. 
     * The performance of the operation is measured and returned in the <code>ConfigResult</code> record.
     * </p>
     * <p>
     * The gRPC stream type used for the request data recovery is that assigned in the request itself
     * (i.e., see <code>{@link DpDataRequest#getStreamType()}</code>).
     * </p>
     * 
     * @param prcrRqsts     the request processor under evaluation
     * @param rqst          time-series data request to be offered to the processor for evaluation
     * @param recPrcrCfg    configuration record for the given request processor
     * 
     * @return  a new <code>ConfigResult</code> record containing the results of the processor request evaluation
     * 
     * @throws DpQueryException general Query Service exception during request processing (see message and cause)
     */
    public static ConfigResult  evaluate(QueryRequestRecoverer prcrRqsts, DpDataRequest rqst, TestConfig recPrcrCfg) throws DpQueryException {

        // Configure the processor
        recPrcrCfg.configure(prcrRqsts);

        Instant insStart = Instant.now();
        SortedSet<RawCorrelatedData>  setData = prcrRqsts.processRequest(rqst);
        Instant insFinish = Instant.now();

        // Compute results
        Duration    durRqst = Duration.between(insStart, insFinish);
        int         cntMsgs = prcrRqsts.getProcessedMessageCount();
        int         cntBlks = setData.size();
        long        szAlloc = prcrRqsts.getProcessedByteCount();
        List<DpDataRequest> lstCmpRqsts = prcrRqsts.getProcessedCompositeRequest();

        double      dblRateXmit  = ( ((double)szAlloc) * 1000 )/durRqst.toNanos();

        // Create result record and save
        ConfigResult    recResult = ConfigResult.from(dblRateXmit, cntMsgs, szAlloc, cntBlks, durRqst, recPrcrCfg, rqst, lstCmpRqsts);

        return recResult;
    }
    
//    /**
//     * <p>
//     * Performs the given time-series data request on the given correlator for the given configuration and evaluates results.
//     * </p>
//     * <p>
//     * The gRPC stream type used for the request data recovery is explicitly given here, however, the actual evaluation
//     * is deferred to method <code>{@link #evaluate(QueryRequestProcessorOld, DpDataRequest, TestConfig)}</code>.
//     * <ol>
//     * <li>
//     * First, the <code>DpDataRequest</code> argument is modified to use the given <code>DpGrpcStreamType</code> 
//     * argument value. 
//     * </li>
//     * <li>
//     * Second, the method <code>{@link #evaluate(QueryRequestProcessorOld, DpDataRequest, TestConfig)}</code> is invoked
//     * to evaluate the processor with the modified request.
//     * </li>
//     * <li>
//     * Third, the <code>DpDataRequest</code> argument is restored to its original state.
//     * </li>
//     * <li>
//     * Last, the result from the <code>{@link #evaluate(QueryRequestProcessorOld, DpDataRequest, TestConfig)}</code> invocation
//     * is returned.
//     * </li>
//     * </ol>
//     * </p>
//     * 
//     * @param prcrRqsts     the request processor under evaluation
//     * @param rqst          time-series data request to be offered to the processor for evaluation
//     * @param enmStrmType   the gRPC stream type to use in the request data recovery
//     * @param recPrcrCfg    configuration record for the given request processor
//     * 
//     * @return  a new <code>ConfigResult</code> record containing the results of the processor request evaluation
//     * 
//     * @throws DpQueryException general Query Service exception during request processing (see message and cause)
//     * 
//     * @see <code>{@link DpDataRequest#getStreamType()}</code>
//     * @see #evaluate(QueryRequestProcessorOld, DpDataRequest, TestConfig)
//     */
//    @SuppressWarnings("deprecation")
//    public static ConfigResult  evaluate(QueryRequestProcessorOld prcrRqsts, DpDataRequest rqst, DpGrpcStreamType enmStrmType, TestConfig recPrcrCfg) throws DpQueryException {
//
//        // Configure the data request
//        DpGrpcStreamType    enmStrmTypeOrg = rqst.getStreamType();
//        rqst.setStreamType(enmStrmType);
//        
//        // Compute results
//        ConfigResult    recResult = ConfigResult.evaluate(prcrRqsts, rqst, recPrcrCfg);
//
//        // Restore data request to original state and return results
//        rqst.setStreamType(enmStrmTypeOrg);
//        
//        return recResult;
//    }
//    
//    /**
//     * <p>
//     * Performs the given time-series data request on the given correlator for the given configuration and evaluates results.
//     * </p>
//     * <p>
//     * First the given <code>TestConfig</code> record is used to configure the given <code>QueryRequestRecoverer</code> 
//     * instance. Then the given <code>DpDataRequest</code> is used for the 
//     * <code>{@link QueryRequestRecoverer#processRequest(DpDataRequest)}</code> operation. 
//     * The performance of the operation is measured and returned in the <code>ConfigResult</code> record.
//     * </p>
//     * <p>
//     * The gRPC stream type used for the request data recovery is that assigned in the request itself
//     * (i.e., see <code>{@link DpDataRequest#getStreamType()}</code>).
//     * </p>
//     * 
//     * @param prcrRqsts     the request processor under evaluation
//     * @param rqst          time-series data request to be offered to the processor for evaluation
//     * @param recPrcrCfg    configuration record for the given request processor
//     * 
//     * @return  a new <code>ConfigResult</code> record containing the results of the processor request evaluation
//     * 
//     * @throws DpQueryException general Query Service exception during request processing (see message and cause)
//     */
//    @SuppressWarnings("deprecation")
//    public static ConfigResult  evaluate(QueryRequestProcessorOld prcrRqsts, DpDataRequest rqst, TestConfig recPrcrCfg) throws DpQueryException {
//
//        // Configure the processor
//        recPrcrCfg.configure(prcrRqsts);
//
//        Instant insStart = Instant.now();
//        SortedSet<CorrelatedQueryDataOld>  setData = prcrRqsts.processRequest(rqst);
//        Instant insFinish = Instant.now();
//
//        // Compute results
//        Duration    durRqst = Duration.between(insStart, insFinish);
//        int         cntMsgs = prcrRqsts.getProcessedMessageCount();
//        int         cntBlks = setData.size();
//        long        szAlloc = prcrRqsts.getProcessedByteCount();
//        List<DpDataRequest> lstCmpRqsts = prcrRqsts.getProcessedCompositeRequest();
//
//        double      dblRateXmit  = ( ((double)szAlloc) * 1000 )/durRqst.toNanos();
//
//        // Create result record and save
//        ConfigResult    recResult = ConfigResult.from(dblRateXmit, cntMsgs, szAlloc, cntBlks, durRqst, recPrcrCfg, rqst, lstCmpRqsts);
//
//        return recResult;
//    }
    
    /**
     * <p>
     * Returns the number of records within the argument collection with data rates greater than or equal to the given rate.
     * </p>
     * <p>
     * The method inspects the field <code>{@link ConfigResult#dblRate()}</code> of the argument collection for the condition 
     * <code>{@link #dblRate}</code> &ge; <code>dblRateMin</code>.  The number of records satisfying this condition are
     * counted and that value is returned.
     * </p>
     * 
     * @param setResults    collection of <code>ConfigResult</code> records under inspection
     * @param dblRateMin    the minimum data rate 
     * 
     * @return  the number of <code>ConfigResult</code> records within the collection with data rates >= to the given rate 
     */
    public static int   countRatesGreaterEqual(Collection<ConfigResult> setResults, double dblRateMin) {
        int intCnt = setResults
                .stream()
                .filter(rec -> rec.dblRate >= dblRateMin)
                .mapToInt(rec -> 1)
                .sum();
        
        return intCnt;
    }
    
    /**
     * <p>
     * Prints out a text description of the current record parameters on the given print stream.
     * </p>
     * 
     * @param ps        print stream for record description
     * @param strPad    optional line padding for parameters
     */
    public void printOut(PrintStream ps, String strPad) {

        // Print out results
        ps.println(strPad + "Processor Configuration Test - Case #" + this.indCase);
        ps.println(strPad + "  Processing rate (Mbps)  : " + this.dblRate);
        ps.println(strPad + "  Test case index         : " + this.indCase);
        ps.println(strPad + "  Messages recovered      : " + this.cntMessages);
        ps.println(strPad + "  Processed data blocks   : " + this.cntBlocks);
        ps.println(strPad + "  Processed bytes         : " + this.szAlloc);
        ps.println(strPad + "  Request duration        : " + this.durRequest);
        ps.println(strPad + "  DpDataRequest name      : " + this.strRqstName);
        ps.println(strPad + "  Composite request count : " + this.lstCmpRqsts.size());
        ps.println(strPad + "  gRPC stream type used   : " + this.enmStrmType);

        // Print out the processor configuration
        ps.println(strPad + "QueryRequestProcessor Configuration");
        this.recConfig.printOut(ps, strPad + strPad);

        // Print out any request decomposition done by the request processor
        ps.println(strPad + "Request Decomposition");
        int indRqst = 1;
        String  strHdr = strPad + strPad;
        for (DpDataRequest rqstCmp : this.lstCmpRqsts) {
            ps.println(strHdr + "Composite Request #" + indRqst);
            ps.println(strHdr + "  gRPC stream type   : " + rqstCmp.getStreamType());
            ps.println(strHdr + "  data source count  : " + rqstCmp.getSourceCount());
            ps.println(strHdr + "  duration (seconds) : " + rqstCmp.rangeDuration().toSeconds());
            ps.println(strHdr + "  time interval      : " + rqstCmp.range());
            ps.println(strHdr + "  domain size        : " + rqstCmp.approxDomainSize());
            indRqst++;
        }
    }

    
    //
    // Record Types
    //
    
    /**
     * <p>
     * Comparator class for sorted collections of <code>ConfigResult</code> records.
     * </p>
     * <p>
     * Provides a reverse (descending) ordering of <code>ConfigResult</code> records by <code>{@link ConfigResult#dblRate}</code>
     * field.  Specifically, the <code>ConfigResult</code> instance with the largest 
     * <code>{@link ConfigResult#dblRate}</code> value appears first.
     * </p>
     */
    public static class ResultOrder implements Comparator<ConfigResult> {

        /**
         * <p>
         * Creates and returns a new <code>ResultOrder</code> comparator for <code>ConfigResult</code> records.
         * </p>
         * <p>
         * <p>
         * The returned comparator orders <code>ConfigResult</code> records by the <code>{@link ConfigResult#dblRate}</code>
         * field.  Specifically, the record ordering is descending where the record with the highest data rates appears first.
         * </p>
         *  
         * @return  a <code>Comparator</code> interface for reverse order of <code>ConfigResult</code> records by rate field
         */
        public static ResultOrder   create() {
            return new ResultOrder();
        }

        
        //
        // Comparator<ConfigResult> Interface
        //

        /**
         * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
         */
        @Override
        public int compare(ConfigResult r1, ConfigResult r2) {
            if (r1.dblRate > r2.dblRate)
                return -1;
            else if (r1.dblRate == r2.dblRate)
                return 0;
            else
                return 1;
        }

    }
    
}