/*
 * Project: dp-api-common
 * File:	TestArchiveRequestTestCase.java
 * Package: com.ospreydcs.dp.jal.tools.query.request
 * Type: 	TestArchiveRequestTestCase
 *
 * Copyright 2010-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.

 * @author Christopher K. Allen
 * @org    OspreyDCS
 * @since Jul 8, 2025
 *
 */
package com.ospreydcs.dp.jal.tools.query.request;

import java.io.PrintStream;
import java.time.Duration;
import java.time.Instant;
import java.util.Set;
import java.util.SortedSet;

import com.ospreydcs.dp.api.query.DpDataRequest;
import com.ospreydcs.dp.api.query.DpQueryException;
import com.ospreydcs.dp.api.query.model.assem.QueryRequestRecoverer;
import com.ospreydcs.dp.api.query.model.assem.QueryResponseAssembler;
import com.ospreydcs.dp.api.query.model.assem.SampledAggregate;
import com.ospreydcs.dp.api.query.model.correl.RawCorrelatedData;
import com.ospreydcs.dp.api.query.model.superdom.TimeDomainProcessor;
import com.ospreydcs.dp.jal.tools.query.superdom.SuperDomTestResult;
import com.ospreydcs.dp.jal.tools.query.testrequests.TestArchiveRequest;

/**
 * <p>
 * Record containing the parameters for a single time-series data query response assembly test case.
 * </p>
 * <p>
 * <h2>Query Response Assembly Test</h2>
 * A time-series query response assembly test case involves the following:
 * <ol>
 * <li>The recovery and correlation of time-series data requests, </li>
 * <li>The super-domain processing of the recovered data into disjoint raw data blocks, </li>
 * <li>The assembly of raw data blocks into disjoint "sampled data blocks" each exposing <code>IDataTable</code>, </li>
 * <li>The aggregation of sampled data blocks into a "sampled aggregate."
 * </ol>   
 * This record contains the parameters necessary to perform
 * a single time-series query response assembly test evaluation.
 * </p>
 * <p>
 * <h2>Operation</h2>
 * A time-series data request assembly requires the component <code>QueryRequestRecoverer</code> to recover
 * the raw request data recovery and correlation, and a <code>QueryResponseAssembler</code> component to assemble
 * the resulting raw correlated data into a sampled aggregate of disjoint sampled blocks.
 * </p>
 * <p>
 * The field <code>{@link #rqstFinal}</code> is the time-series data request to be performed
 * for the test case.  The other parameters are used to modify the request generated by field
 * <code>{@link #enmRqstOrg}</code>, the originating <code>{@link TestArchiveRquest}</code> instance
 * from which the final request is built.
 * </p>
 * <p>
 * <h2>Test Case Evaluation and Results</h2>
 * A test case is evaluated using the <code>{@link #evaluate(QueryRequestRecoverer)}</code> method.  The
 * The results of a single test case are contained in a <code>{@link SuperDomTestResult}</code> record, which
 * is returned by the method.  Considering the above, the result record contain fields for both the 
 * recovery and correlation of the raw, time-series data, and for the super-domain processing that follows.
 * </p> 
 *
 * @author Christopher K. Allen
 * @since Jul 8, 2025
 *
 *
 * @param enmRqstOrg    the originating Test Archive data request
 * @param setPvNames    set of PV names supplementing the request
 * @param durRange      request time range duration override
 * @param durDelay      request time range delay override
 * @param rqstFinal     the final time-series data request to perform
 */
public record TestArchiveRequestTestCase(
        int                 indCase,
        TestArchiveRequest  enmRqstOrg,
        Set<String>         setPvNames,
        Duration            durRange,
        Duration            durDelay,
        DpDataRequest       rqstFinal
        ) 
{

    //
    // Creator
    //
    
    /**
     * <p>
     * Creates and returns a new <code>TestArchiveRequestTestCase</code> record with fields given by the argument valuees.
     * </p>
     * 
     * @param enmRqstOrg    the originating Test Archive data request
     * @param setPvNames    set of PV names supplementing the request
     * @param durRange      request time range duration override
     * @param durDelay      request time range delay override
     * @param rqstFinal     the final time-series data request to perform
     * 
     * @return  a new <code>TestArchiveRequestTestCase</code> record populated with the given values  
     */
    public static final TestArchiveRequestTestCase    from(
            TestArchiveRequest  enmRqstOrg,
            Set<String>         setPvNames,
            Duration            durRange,
            Duration            durDelay,
            DpDataRequest       rqstFinal
            )
    {
        return new TestArchiveRequestTestCase(IND_CASE, enmRqstOrg, setPvNames, durRange, durDelay, rqstFinal);
    }

    
    //
    // Record Resources
    //
    
    /** Internal test case index (counter) */
    private static          int IND_CASE = 1;
    
    
//    /** The time-domain collision processor */
//    private static final QueryResponseAssembler    PROC_QRY_RSP = QueryResponseAssembler.create();
//
    
    //
    // Constructors
    //
    
    /**
     * <p>
     * Constructs a new <code>QueryChannelTestCase</code> instance.
     * </p>
     * <p>
     * Canonical constructor.  Sets field values and increments record index counter <code>{@link #IND_CASE}</code>
     * </p>
     *
     * @param indCase     the test case index
     * @param enmRqstOrg    the originating Test Archive data request
     * @param setPvNames    set of PV names supplementing the request
     * @param durRange      request time range duration override
     * @param durDelay      request time range delay override
     * @param rqstFinal     the final time-series data request to perform
     */
    public TestArchiveRequestTestCase {
        IND_CASE++;
    }
    
    
    
    //
    // Operations
    //
    
    /**
     * <p>
     * Evaluates this test case using the given <code>QueryRequestProcessor</code> and <code>QueryResponseAssembler</code>.
     * </p>
     * <p>
     * The test case data recovery described by this record is performed on the given <code>QueryRequestProcessor</code>
     * and <code>QueryResponseAssembler</code> objects.
     * The time-series data request is performed, the raw data is recovered and correlated, then assembled into 
     * into a sample block aggregate and inspected.
     * The performance of the evaluation is measured along with the properties of the correlation and assembly
     * products then returned as a <code>TestArchiveRequestTestResult</code> record.
     * </p>
     * <p>
     * <h2>Evaluation</h2>
     * There are essentially two operation within a <code>TestArchiveRequestTestCase</code>: 
     * <ol>
     * <li>Recovery and correlation of the time-series data request.</li>
     * <li>Assembly of the raw correlated data into an aggregate of sampled blocks.</li>
     * </ol>
     * The results of the first operation are contained in the result field 
     * <code>{@link TestArchiveRequestTestResult#recRecoveryResult()}</code> while the results of the second operation are contained
     * in the <code>{@link TestArchiveRequestTestResult#recSmpAggResult()}</code> field.
     * </p>
     * <p>
     * The recovery and correlation recovers all raw data from the Query Service as <code>QueryData</code>
     * Protocol Buffers messages, then correlates the data by timestamps.  That is, all data belonging to
     * a set of timestamps (either a sample clock or an explicit timestamp list) is identified and assigned
     * to the timestamps.  The products of this operation are <code>RawCorrelatedData</code> instances.
     * </p>
     * <p>
     * Sampled block are then created from the raw correlated data blocks.  These <code>SampledBlock</code> instances
     * are then assembled into a super structure, <code>SampledAggregate</code>, representing all the query data
     * from the original time-series data request.
     * </p>
     * </p>
     * <p>
     * <h2>Super Domain Processing</h2>
     * After the raw data is correlated it is also processed into "super domains," which are collections of
     * raw correlated data blocks containing intersecting time domains.  The super domain processing is part
     * of the sampled block creation and assembly into sampled aggregates.
     * </p>
     * <p>
     * The super domain processing inspects the timestamps of all correlated data for time-domain collisions.
     * Time-domain collisions are typically caused by process variables sampled during the same time interval
     * but with different sample periods.  The super domain processor identifies all correlated data with time-domain
     * collisions and separates them into "super domains."  The remaining correlated data (i.e., without collisions
     * is left as is.  The result is a collection of data with disjoint time domains, either standard timestamped
     * domains, or super domains.
     * </p>
     * <p>
     * The super-domain processing rate is computed in "blocks per second" and returned in the field
     * <code>{@link SuperDomTestResult#dblRateSupDomPrcd()}</code>.  It is the number of raw, correlated data
     * blocks given to the <code>TimeDomainProcessor</code> divided by the time taken for processing,
     * or <code>{@link SuperDomTestResult#cntRawBlksTotal()}</code> / <code>{@link SuperDomTestResult#durSupDomPrcd()}</code>. 
     * </p> 
     * <p>
     * <h2>NOTES:</h2>
     * <ul>
     * <li>
     * A separate <code>{@link TimeDomainProcessor}</code> object is created and used for each test evaluation.
     * This object performs the super domain processing described above. 
     * </li>
     * <li>
     * The <code>QueryMessageBuffer</code> instance will be shut down and empty when this method returns.
     * </li>
     * <li>
     * The super-domain processing rate is computed in "blocks per second" and returned in the field
     * <code>{@link SuperDomTestResult#dblRateSupDomPrcd()}</code>.   
     * </li>
     * </ul>
     * </p>
     * 
     * @param prcrRqsts     the processor of time-series data requests into raw correlated data
     * @param prcrAssem     the processor of raw correlated data into sampled aggregate products
     * 
     * @return  A <code>TestArchiveRequestTestResult</code> record containing the results of the evaluation
     * 
     * @throws DpQueryException general exception during recovery and/or processing (see message and cause)
     */
    public TestArchiveRequestTestResult   evaluate(QueryRequestRecoverer prcrRqsts, QueryResponseAssembler prcrAssem) 
            throws DpQueryException {

        // Perform and time the raw data data recovery and correlation
        Instant insStart = Instant.now();
        SortedSet<RawCorrelatedData> setRawData = prcrRqsts.processRequest(this.rqstFinal); // throws DpQueryException
        Instant insFinish = Instant.now();
        
        Duration    durRecovery = Duration.between(insStart, insFinish);
        QueryRecoveryResult recRecoveryResult = QueryRecoveryResult.from(prcrRqsts, setRawData, durRecovery);
        
        // Assemble and time the sampled aggregate from correlated raw data
        String  strRqstId = prcrRqsts.getRequestId();

        insStart = Instant.now();
        SampledAggregate    aggBlks = prcrAssem.process(strRqstId, setRawData);    // throws DpQueryException
        insFinish = Instant.now();
        
        Duration durAssem = Duration.between(insStart, insFinish);
        SampledAggregateResult  recAssemResult = SampledAggregateResult.from(aggBlks, durAssem);
        
        
        // Assemble the QryRspAssemResult record from raw correlated data result and assembly result
        TestArchiveRequestTestResult   recResult = TestArchiveRequestTestResult.from(strRqstId, recRecoveryResult, recAssemResult, this);
        
        return recResult;
    }
    
    /**
     * <p>
     * Prints out a text description of the record fields to the given output stream.
     * </p>
     * <p>
     * A line-by-line text description of each record field is written to the given output.
     * The <code>strPad</code> is used to supply an optional whitespace character padding to the
     * left-hand side header for each line description.
     * </p>
     *   
     * @param ps        output stream to receive text description of record fields
     * @param strPad    white-space padding for each line header (or <code>null</code>)
     */
    public void printOut(PrintStream ps, String strPad) {
        if (strPad == null)
            strPad = "";
        
        ps.println(strPad + this.getClass().getSimpleName() + " #" + this.indCase + ":");
        ps.println(strPad + "  Test Archive request ID   : " + this.enmRqstOrg.name());
        ps.println(strPad + "  Time-series request ID    : " + this.rqstFinal.getRequestId());
        ps.println(strPad + "  Supplemental PV names     : " + this.setPvNames);
        ps.println(strPad + "  Request duration override : " + this.durRange);
        ps.println(strPad + "  Request delay override    : " + this.durDelay);
    }

}
