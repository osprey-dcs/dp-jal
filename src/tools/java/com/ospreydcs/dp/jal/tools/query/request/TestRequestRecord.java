/*
 * Project: dp-api-common
 * File:    TestRequestRecord.java
 * Package: com.ospreydcs.dp.jal.tools.query.request
 * Type:    TestRequestRecord
 *
 * Copyright 2010-2025 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * @author Christopher K. Allen
 * @org    OspreyDCS
 * @since May 6, 2025
 *
 */
package com.ospreydcs.dp.jal.tools.query.request;

import java.time.Duration;
import java.util.concurrent.TimeUnit;

import com.ospreydcs.dp.api.common.DpGrpcStreamType;
import com.ospreydcs.dp.api.config.DpApiConfig;
import com.ospreydcs.dp.api.config.query.DpDataRequestConfig;
import com.ospreydcs.dp.api.query.DpDataRequest;
import com.ospreydcs.dp.jal.tools.config.JalToolsConfig;

/**
 * <p>
 * Record containing fields defining a Data Platform test archive time-series data request as generated by
 * the utility class <code>TestArchiveRequestCreator</code>.
 * </p>
 * <p>
 * Record contains fields for creating a test request with the 
 * <code>{@link TestArchiveRequestCreator}</code> utility.  
 * </p>
 * <p>
 * Thus, the act of creating a <code>TestQueryRecord</code> record both defines a specific
 * QueryService query (against the test archive) and provides access to the query's 
 * results set. Additionally, the <code>{@link #storeQueryResults()}</code> method
 * can store the recovered results set to a data file for persistence.
 * Saving the results sets to persistent file storage provides future testing availability 
 * without requiring an enabled Query Service.  
 * </p>
 * <p>
 * <h2>NOTES:</h2>
 * The record class maintains a static <code>{@link TestQueryService}</code> instance
 * which is created if necessary (i.e., if an actual query is performed to create the
 * results set).  <em>This instance should be shut down when no longer needed.</em>
 * </p>
 * 
 * @param   strId           request identifier string
 * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
 * @param   enmStrmType     the gRPC stream type used for request data recovery
 * @param   cntDataSources  number of data sources (PVs) within data request 
 * @param   indSourceOffset index offset of the first data source within the list of source names
 * @param   durRequest      the time duration of the time-series data request
 * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
 * 
 *
 * @author Christopher K. Allen
 * @since May 6, 2025
 *
 */
public record TestRequestRecord(
        String      strId,
        TestRequestType     enmRqstType,
        DpGrpcStreamType    enmStrmType,
        int         cntDataSources,
        int         indSourceOffset,
        Duration    durRequest,
        Duration    durStartOffset
        ) 
{

    
    //
    // Creators
    //
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with all fields given by the arguments.
     * </p>
     * <p>
     * This creator is an alternate to the canonical record constructor.
     * </p>
     *  
     * @param   strId           request identifier string
     * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
     * @param   enmStrmType     the gRPC stream type used for request data recovery
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   durRequest      the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields
     */
    public static TestRequestRecord from(String strId, TestRequestType enmRqstType, DpGrpcStreamType enmStrmType, int cntDataSources, int indSourceOffset, Duration durRequest, Duration durStartOffset) {
        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with fields given by the arguments.
     * </p>
     * <p>
     * The <code>{@link #strId}</code> field is created from the constant <code>{@link #STR_UNNAMED_RQST}</code>
     * suffixed by the next record index value (see <code>{@link #getNextIndex()}</code>).
     * </p>
     * 
     * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
     * @param   enmStrmType     the gRPC stream type used for request data recovery
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   durRequest      the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields and auto-generated request ID
     */
    public static TestRequestRecord from(TestRequestType enmRqstType, DpGrpcStreamType enmStrmType, int cntDataSources, int indSourceOffset, Duration durRequest, Duration durStartOffset) {
        String  strId = STR_UNNAMED_RQST + IND_RQST;
        
        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with fields given by the arguments.
     * </p>
     * <p>
     * The default value of <code>{@link #ENM_STRM_DEF}</code> is used for the record field 
     * <code>{@link #enmStrmType}</code>.
     * </p>
     *  
     * @param   strId           request identifier string
     * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   durRequest      the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields and default gRPC stream type
     */
    public static TestRequestRecord from(String strId, TestRequestType enmRqstType, int cntDataSources, int indSourceOffset, Duration durRequest, Duration durStartOffset) {
        DpGrpcStreamType enmStrmType = ENM_STRM_DEF;

        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with fields given by the arguments.
     * </p>
     * <p>
     * The <code>{@link #strId}</code> field is created from the constant <code>{@link #STR_UNNAMED_RQST}</code>
     * suffixed by the next record index value (see <code>{@link #getNextIndex()}</code>).
     * The default value of <code>{@link #ENM_STRM_DEF}</code> is used for the record field 
     * <code>{@link #enmStrmType}</code>.
     * </p>
     *  
     * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   durRequest      the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields with auto-generated request ID and default gRPC stream type
     */
    public static TestRequestRecord from(TestRequestType enmRqstType, int cntDataSources, int indSourceOffset, Duration durRequest, Duration durStartOffset) {
        String              strId = STR_UNNAMED_RQST + IND_RQST;
        DpGrpcStreamType    enmStrmType = ENM_STRM_DEF;
        
        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with all fields given by the arguments.
     * </p>
     * <p>
     * The <code>{@link #strId}</code> field is created from the constant <code>{@link #STR_UNNAMED_RQST}</code>
     * suffixed by the next record index value (see <code>{@link #getNextIndex()}</code>).
     * The default request type <code>{@link #ENM_RQST_DEF}</code> is used for record field
     * <code>{@link #enmRqstType}</code>.
     * The default value of <code>{@link #ENM_STRM_DEF}</code> is used for the record field 
     * <code>{@link #enmStrmType}</code>.
     * </p>
     *  
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   durRequest      the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields with auto-generated request ID, 
     *          default request type, and default gRPC stream type
     */
    public static TestRequestRecord from(int cntDataSources, int indSourceOffset, Duration durRequest, Duration durStartOffset) {
        String              strId = STR_UNNAMED_RQST + IND_RQST;
        TestRequestType     enmRqstType = ENM_RQST_DEF;
        DpGrpcStreamType    enmStrmType = ENM_STRM_DEF;
        
        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    /**
     * <p>
     * Creates a new <code>TestRequestRecord</code> with all fields given by the arguments.
     * </p>
     * <p>
     * Convenience constructor converting explicit time amounts and units into Java <code>Duration</code>
     * instances appropriate for fields <code>{@link #durRequest}</code> and <code>{@link #durStartOffset}</code>.
     * </p>
     * 
     * @param strId             (optional) request identifier
     * @param enmStrmType       the gRPC stream type used for request data recovery
     * @param enmRqstType       the request type (i.e., specifies sampling method of data sources)
     * @param cntDataSources    number of data sources (PVs) within data request 
     * @param indSourceOffset   index offset of the first data source within the list of source names
     * @param lngRqstDur        the time duration of the time-series data request
     * @param tuRqstDur         the time duration units
     * @param lngRqstOffset     start time of the time range (i.e., offset from the archive inception instant)
     * @param tuRqstOffset      start time units
     * 
     * @return  a new <code>TestRequestRecord</code> instance with the given fields
     */
    public TestRequestRecord from(
            String strId,
            TestRequestType enmRqstType, 
            DpGrpcStreamType enmStrmType,
            int cntDataSources, 
            int indSourceOffset, 
            long lngRqstDur, 
            TimeUnit tuRqstDur, 
            long lngRqstOffset, 
            TimeUnit tuRqstOffset) {
        Duration    durRequest = Duration.of(lngRqstDur, tuRqstDur.toChronoUnit());
        Duration    durStartOffset = Duration.of(lngRqstOffset, tuRqstOffset.toChronoUnit());

        return new TestRequestRecord(strId, 
                enmRqstType, 
                enmStrmType, 
                cntDataSources, 
                indSourceOffset, 
                durRequest, 
                durStartOffset);
    }
    
    //
    // Application Resources
    //

    /** Default time-series data request configuration parameters */
    private static final DpDataRequestConfig    CFG_RQST_DEF = DpApiConfig.getInstance().query.data.request;
    
    
    //
    // Record Resources
    //
    
    /** Running unnamed request index */
    private static int              IND_RQST = 0;

    
    //
    // Record Constants
    //
    
    /** Common prefix used for unnamed requests */
    public static final String              STR_UNNAMED_RQST = "ID_";
    
    /** The default request type */
    public static final TestRequestType     ENM_RQST_DEF = TestRequestType.GENERAL;
    
    /** The default gRPC stream type */
    public static final DpGrpcStreamType    ENM_STRM_DEF = CFG_RQST_DEF.stream.preference;
    
    
    //
    // Constructors
    //
    
    /**
     * <p>
     * Constructs a new <code>TestRequestRecord</code> instance.
     * </p>
     * <p>
     * Canonical record constructor.
     * </p>
     *
     * @param   strId           (optional) request identifier
     * @param   enmRqstType     the request type (i.e., specifies sampling method of data sources)
     * @param   enmStrmType     the gRPC stream type used for request data recovery
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   lngDuration     the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     */
    public TestRequestRecord {
        IND_RQST++;
    }
    
    /**
     * <p>
     * Constructs a new, unnamed <code>TestRequestRecord</code> instance.
     * </p>
     *
     * @param   enmRqstType         the request type (i.e., specifies sampling method of data sources)
     * @param   enmStrmType     the gRPC stream type used for request data recovery
     * @param   cntDataSources  number of data sources (PVs) within data request 
     * @param   indSourceOffset index offset of the first data source within the list of source names
     * @param   lngDuration     the time duration of the time-series data request
     * @param   durStartOffset  start time of the time range (i.e., offset from the archive inception instant)
     */
    public TestRequestRecord(
            TestRequestType enmRqstType,
            DpGrpcStreamType enmStrmType,
            int cntDataSources, 
            int indSourceOffset,
            Duration durRequest,
            Duration durStartOffset
            )
    {
        this(STR_UNNAMED_RQST + Integer.toString(IND_RQST++), enmRqstType, enmStrmType, cntDataSources, indSourceOffset, durRequest, durStartOffset);
    }
    
    /**
     * <p>
     * Constructs a new <code>TestRequestRecord</code> instance.
     * </p>
     *
     * @param strId             (optional) request identifier
     * @param enmStrmType       the gRPC stream type used for request data recovery
     * @param enmRqstType       the request type (i.e., specifies sampling method of data sources)
     * @param cntDataSources    number of data sources (PVs) within data request 
     * @param indSourceOffset   index offset of the first data source within the list of source names
     * @param lngRqstDur        the time duration of the time-series data request
     * @param tuRqstDur         the time duration units
     * @param lngRqstOffset     start time of the time range (i.e., offset from the archive inception instant)
     * @param tuRqstOffset      start time units
     */
    public TestRequestRecord(
            String strId,
            TestRequestType enmRqstType, 
            DpGrpcStreamType enmStrmType,
            int cntDataSources, 
            int indSourceOffset, 
            long lngRqstDur, 
            TimeUnit tuRqstDur, 
            long lngRqstOffset, 
            TimeUnit tuRqstOffset) 
    {
        this(strId, enmRqstType, enmStrmType, cntDataSources, indSourceOffset, 
                Duration.of(lngRqstDur, tuRqstDur.toChronoUnit()), 
                Duration.of(lngRqstOffset, tuRqstOffset.toChronoUnit()) 
                );
    }
    
    
    //
    // Operations
    //
    
    /**
     * <p>
     * Returns the value of the next record index, internal class variable <code>{@link #IND_RQST}</code>.
     * </p>
     * 
     * @return  the value of the next record index
     */
    public static int  getNextIndex() {
        return IND_RQST;
    }
    
    /**
     * <p>
     * Creates a new <code>DpDataRequest</code> instance configured to the record fields.
     * </p>
     * <p>
     * Creates a new <code>DpDataRequest</code> instance for the Data Platform test archive.
     * The request query is defined by the current record fields.  Since the returned request 
     * instance is owned by the the caller it can be subsequently modified.
     * </p>
     * 
     * @return  new <code>DpDataRequest</code> instance for the Data Platform test archive
     * 
     * @throws IllegalArgumentException the record fields create a query request outside the test archive (see message)
     */
    public DpDataRequest    createRequest() throws IllegalArgumentException {

        DpDataRequest rqst = TestArchiveRequestCreator.createRequest(this.enmRqstType, 
                                                          this.cntDataSources, 
                                                          this.indSourceOffset, 
                                                          this.durRequest, 
                                                          this.durStartOffset);
        rqst.setRequestId(this.strId);
        rqst.setStreamType(this.enmStrmType);
        
        return rqst;
    }
    
}
